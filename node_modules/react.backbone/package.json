{
  "name": "react.backbone",
  "version": "0.5.0",
  "author": {
    "name": "Clay Allsopp",
    "email": "clay.allsopp@gmail.com"
  },
  "scripts": {
    "test": "jest"
  },
  "description": "Plugin for React to make Backbone migration easier",
  "main": "react.backbone.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/usepropeller/react.backbone"
  },
  "keywords": [
    "react",
    "backbone",
    "reactjs",
    "jsx",
    "react.backbone"
  ],
  "license": "MIT",
  "devDependencies": {
    "jest-cli": "~0.1.17",
    "react-tools": "0.11.x",
    "react": ">=0.10.x <1.x.x",
    "backbone": "1.x.x"
  },
  "peerDependencies": {
    "react": ">=0.10.x <1.x.x",
    "backbone": "1.x.x"
  },
  "jest": {
    "unmockedModulePathPatterns": [
      "node_modules/react"
    ],
    "scriptPreprocessor": "preprocessor.js"
  },
  "readme": "react.backbone\n==============\n\n[![Build Status](https://travis-ci.org/usepropeller/react.backbone.svg)](https://travis-ci.org/usepropeller/react.backbone)\n\nPlugin for React to make Backbone integration easier. Initialize your component\nwith a Backbone.Model or Backbone.Collection; when the model or collection\nchanges, `#render` will be called.\n\n```javascript\nvar UserView = React.createBackboneClass({\n    changeOptions: \"change:name\", // DEFAULT is \"change\",\n    render: function() {\n        return (\n          <div>\n              <h1>{this.getModel().get(\"name\")}</h1>\n          </div>\n        );\n    }\n});\n\nvar user = new Backbone.Model();\nvar userView = UserView({model: user});\n\n// Mount your component directly\nReact.renderComponent(userView, document.getElementById('element'));\n\n// Render as a subview\nvar ProfileView = React.createClass({\n  render: function() {\n      return (\n        <div>\n          <UserView model={this.props.user} />\n        </div>\n      );\n  }\n});\n```\n\nReact.Backbone also plays nicely with `Backbone.Collection`. Anytime the `add`,\n`remove`, `reset` or `sort` events are triggered the component will re-render.\n\n```javascript\nvar UserView = React.createBackboneClass({\n  render: function() {\n    return <li>{ this.getModel().get('name') }</li>;\n  }\n});\n\nvar UsersListView = React.createBackboneClass({\n    render: function() {\n        var usersList = this.getCollection().map(function(user) {\n            return <UserView model={user} />;\n        });\n\n        return (\n          <div>\n            <ul>\n              { usersList }\n            </ul>\n          </div>\n        );\n    }\n});\n\nvar usersList = new Backbone.Collection();\nvar usersListView = UsersListView({collection: usersList});\n\nReact.renderComponent(usersListView, document.getElementById('users'));\n```\n\nIf you need to use multiple models, you can do so by including the mixin\nmultiple times:\n\n```javascript\nvar CommentView = React.createBackboneClass({\n    mixins: [\n\n        // when the view is instantiated,\n        // 'user' and 'comment' can be passed as props\n        React.BackboneMixin(\"user\", \"change:name\"),\n        React.BackboneMixin(\"comment\")\n    ],\n    render: function() {\n        return (\n          <div>\n              <p>{this.props.comment.get(\"text\")}</p>\n              <p>{'posted by' + this.props.user.get(\"name\")}</h1>\n          </div>\n        );\n    }\n});\n\nvar user = new Backbone.Model();\nvar comment = new Backbone.Model();\nvar commentView = CommentView({user: user, comment: comment});\n\nReact.renderComponent(usersListView, document.getElementById('users'));\n```\n\nYou can also pass an object with options to the included mixin:\n\n```javascript\nReact.BackboneMixin({\n    propName: \"user\",\n    renderOn: \"change:name\"\n});\n```\n\nOr supply a custom callback to the option `modelOrCollection` to retrieve the\nproperty from the component's props:\n\n```javascript\nReact.BackboneMixin({\n    modelOrCollection: function(props) {\n        return props.comment.user;\n    },\n    renderOn: \"change:name\"\n});\n```\n\n### Installation\n\nEither download `react.backbone.js` or install the `react.backbone` package on\nBower:\n\n```\nbower install --save react.backbone\n```\n\nYou can either include react.backbone in a `<script>` tag (after you've\nincluded Backbone and React) or through RequireJS/AMD:\n\n```javascript\ndefine(['backbone', 'react', 'react.backbone'], function(Backbone, React) {\n    var UserView = React.createBackboneClass({\n        // ...\n    });\n});\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/usepropeller/react.backbone/issues"
  },
  "homepage": "https://github.com/usepropeller/react.backbone",
  "_id": "react.backbone@0.5.0",
  "_shasum": "df6c3f2d14b35b16ea663ae9ef9ae00187d53e62",
  "_from": "react.backbone@",
  "_resolved": "https://registry.npmjs.org/react.backbone/-/react.backbone-0.5.0.tgz"
}
